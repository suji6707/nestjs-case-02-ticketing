// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserEntity {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  encryptedPassword String   @map("encrypted_password")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  reservations   ReservationEntity[]
  userPoint      UserPointEntity?
  pointHistories PointHistoryEntity[]

  @@map("users")
}

model UserPointEntity {
  id        Int        @id @default(autoincrement())
  userId    Int        @map("user_id")
  user      UserEntity @relation(fields: [userId], references: [id])
  balance   Int        @default(0)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")

  @@unique([userId])
  @@map("user_points")
}

model PointHistoryEntity {
  id        Int        @id @default(autoincrement())
  userId    Int        @map("user_id")
  user      UserEntity @relation(fields: [userId], references: [id])
  type      Int        @db.TinyInt
  amount    Int
  createdAt DateTime   @default(now()) @map("created_at")

  @@index([userId])
  @@map("point_histories")
}

model ConcertEntity {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  schedules ConcertScheduleEntity[]

  @@map("concerts")
}

model ConcertScheduleEntity {
  id         Int           @id @default(autoincrement())
  concertId  Int           @map("concert_id")
  concert    ConcertEntity @relation(fields: [concertId], references: [id])
  basePrice  Int           @map("base_price")
  startAt    DateTime      @map("start_at")
  endAt      DateTime      @map("end_at")
  totalSeats Int           @map("total_seats")
  isSoldOut  Boolean       @default(false) @map("is_sold_out")

  seats SeatEntity[]

  @@index([concertId])
  @@map("concert_schedules")
}

model SeatEntity {
  id         Int                   @id @default(autoincrement())
  scheduleId Int                   @map("schedule_id")
  schedule   ConcertScheduleEntity @relation(fields: [scheduleId], references: [id])
  className  String                @map("class_name")
  price      Int
  status     Int                   @db.TinyInt

  reservation ReservationEntity?

  @@index([scheduleId])
  @@map("seats")
}

model ReservationEntity {
  id            Int        @id @default(autoincrement())
  userId        Int        @map("user_id")
  user          UserEntity @relation(fields: [userId], references: [id])
  seatId        Int        @map("seat_id")
  seat          SeatEntity @relation(fields: [seatId], references: [id])
  purchasePrice Int        @map("purchase_price")
  status        Int        @db.TinyInt
  paidAt        DateTime?  @map("paid_at")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")

  @@unique([seatId])
  @@index([userId])
  @@map("reservations")
}

model EventLogEntity {
  id        Int      @id @default(autoincrement())
  eventName String   @map("event_name")
  timestamp DateTime
  data      Json
  createdAt DateTime @default(now()) @map("created_at")

  @@index([eventName])
  @@index([timestamp])
  @@map("event_logs")
}

model PaymentTransactionEntity {
  id                Int      @id @default(autoincrement())
  paymentTxId       String   @map("payment_tx_id") // 멱등성 키
  userId            Int      @map("user_id")
  seatId            Int      @map("seat_id")
  status            Int      @db.TinyInt
  retryCount        Int      @default(0) @map("retry_count")
  lastFailureReason String?  @map("last_failure_reason")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  @@index([userId, seatId]) 
  @@unique([paymentTxId]) // 중복/동시 결제 방지
  @@map("payment_transactions")
}
